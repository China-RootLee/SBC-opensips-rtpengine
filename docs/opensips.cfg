#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#

# author luojuan email: alice.luojuan@gmail.com
####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:172.31.13.73:5060   # CUSTOMIZE ME
#listen=tcp:172.31.13.73:5000   # CUSTOMIZE ME
#listen=ws:172.31.13.73:7000
listen=wss:172.31.13.73:4430
listen=tls:172.31.13.73:4431


####### Modules Section ########

#set module path
mpath="/usr/local//lib64/opensips/modules/"

# load our certificate management module
loadmodule "tls_mgm.so"

modparam("tls_mgm", "tls_method", "SSLv23")
modparam("tls_mgm", "verify_cert", "0")
modparam("tls_mgm", "require_cert", "0")

modparam("tls_mgm", "certificate", "/etc/encrypt/server/server-cert.pem")
modparam("tls_mgm", "private_key", "/etc/encrypt/server/server-key.pem")

modparam("tls_mgm", "ca_dir", "/etc/pki/CA")
#modparam("tls_mgm", "ciphers_list", "NULL")
#server domain
#modparam("tls_mgm", "server_domain", "sv_dom")
#modparam("tls_mgm", "match_ip_address", "[sv_dom]172.31.13.73:5062")
#modparam("tls_mgm", "certificate", "/etc/encrypt/ca.crt")
#modparam("tls_mgm", "private_key", "/etc/encrypt/ca.key")
#modparam("tls_mgm", "ca_list", "/opt/opensips-2.4.0/tls_cnf/tls/rootCA/cacert.pem")

#client domain

#modparam("tls_mgm", "client_domain", "cl_dom=172.31.13.78:3000")
#modparam("tls_mgm", "match_ip_address", "[dom1]*")
#modparam("tls_mgm", "certificate", "cl_dom:/etc/pki/CA/client.crt")
#modparam("tls_mgm", "private_key", "cl_dom:/et/pki/CA/client.key")

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

### Record Route Module
#loadmodule "rr.so"
#modparam("rr", "append_fromtag", 0)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
#modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url",
	 "mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-through")
modparam("usrloc", "max_contact_delete", 1)

#### MID_REGISTRAR module
loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 2) /*0=mirror/ 1 =ct/ 2 = AoR */
modparam("mid_registrar", "outgoing_expires", 3600)
#modparam("mid_registrar", "insertion_mode", 1)
modparam("mid_registrar", "received_avp", "$avp(rcv)")
modparam("mid_registrar", "max_contacts", 1)


#### REGISTRAR module
#loadmodule "registrar.so"
#modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 1)
#modparam("registrar", "received_avp", "$avp(rcv)")

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
		"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

### RTPengine
loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:12225")


### mangler MODULE
loadmodule "mangler.so"

##Nathelper protocol
loadmodule "nathelper.so"
modparam("registrar|nathelper", "received_avp", "$avp(rcv)")

loadmodule "nat_traversal.so"

## stun server MODULE 
#loadmodule "stun.so"
#modparam("stun", "primary_ip", "172.31.13.73/113.204.227.146")
#modparam("stun", "alternate_ip", "127.0.0.1/113.204.227.146")

## Load all protoxol
loadmodule "proto_ws.so"
loadmodule "proto_udp.so"
loadmodule "proto_wss.so"
loadmodule "proto_tcp.so"
loadmodule "proto_tls.so"

 
####### Routing Logic ########

# main request routing logic

route{
	if (!mf_process_maxfwd_header("10")) {
		send_reply("483","Too Many Hops");
		exit;
	}
	if ($proto == "ws" || $proto == "wss")
		setflag(SRC_WS);
	if (has_totag()) {
		if (loose_route()) {
			if (is_method("INVITE")) {
				if(check_route_param("mr=1")) {
					xlog("DST_WS===========reinvite flag");
					setbflag(DST_WS);
				}
				#setbflag(DST_WS);
				record_route();
			}
			route(relay);
		} else {
			if (is_method("ACK")) {
				if (t_check_trans()) {
					t_relay();
					exit;
				} else {
					exit;
				}
			}
			sl_send_reply("404", "Not here");
		}
		exit;
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply("404","Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}
		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		#route(relay);
		#exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	#if ( !(is_method("REGISTER")  ) ) {
	#	
	#	if (is_myself("$fd")) {
					
	#		# authenticate if from local subscriber
	#		# authenticate all initial non-REGISTER request that pretend to be
	#		# generated by local subscriber (domain from FROM URI is local)
	#		if (!proxy_authorize("", "subscriber")) {
	#			proxy_challenge("", "0");
	#			exit;
	#		}
	#		if (!db_check_from()) {
	#			send_reply("403","Forbidden auth ID");
	#			exit;
	#		}

	#		consume_credentials();
	#		# caller authenticated
	#		
	#	} else {
	#		# if caller is not local, then called number must be local
	#			
	#		if (!is_myself("$rd")) {
	#			# as a proxy
	#			route(relay);
	#			#send_reply("403","Relay Forbidden");
	#			#exit;
	#		}
	#	}

	#}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	#if (is_method("INVITE")) {
		
	#	# create dialog with timeout
	#	if ( !create_dialog("B") ) {
	#		send_reply("500","Internal Server Error");
	#		exit;
	#	}
		
	#	do_accounting("db");
		
	#	}

	
	#if (!is_myself("$rd")) {
	#	xlog("is not -my -self =======$var(rd)");
	#	append_hf("P-hint: outbound\r\n");
	#	t_on_reply("handle_reply_reg"); 
	#	#route(handle_reg);
	#	#route(relay);
	#}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply("503", "Service Unavailable");
		exit;
	}
	if ($proto == "ws" || $proto == "wss")
		setflag(SRC_WS);

	#confider the client is behind NAT - always fix the contact
	fix_nated_contact();

	if(is_method("INVITE | MESSAGE") && $si == "172.19.0.251" && $sp == "5060") {
		xlog("find ============== $si!\n");
		if(!mid_registrar_lookup("location")) {
		#if(!lookup("location")) {
			t_reply("404", "Not Found");
			exit;
		}
		#add_rr_param(";MR=1");
		route(relay);
	}


	if (is_method("REGISTER")) {

		if (isflagset(SRC_WS)) {
			setbflag(DST_WS);
		}
		# 标记从opensips注册的用户
		#setbflag(OPENSIPS);
		# 检查sip是否包含私有地址
		if (client_nat_test("11")) {
			fix_contact();
		}

		
		#如果同一个联系人注册过将之前的删除掉
		#if (is_registered("location")) {
		#	xlog("-------is registed");
		#}
	
		#if (is_contact_registered("location")) {
		#	xlog("contact registerd--=-=-=-=-=-=-=-=-=-==-");
		#}
		
		fix_nated_register();
		xlog("mid_registrar=======");

		mid_registrar_save("location"); 
		#save("location");
		switch ($retcode) {
		case 1: 
			xlog("forwarding register to main registrar($$ci=$ci)\n");
			$ru = "sip:172.19.0.251:5060";
			t_relay();
			break;
		case 2: 
			xlog("absorbing REGISTRAR!($$ci=$ci)\n");
			break;
		default: 
			xlog("failed to save registration! ($$ci=$ci)\n");
			sl_reply_error();
			exit;
		}
		exit;
	}
	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply("484","Address Incomplete");
		exit;
	}	

	# do lookup with method filtering
	#if (!lookup("location")) {
	#	if (!db_does_uri_exist()) {
	#		send_reply("420","Bad Extension");
	#		exit;
	#	}
	#	
	#	t_reply("404", "Not Found");
	#	exit;
	#} 

	

	# when routing via usrloc, log the missed calls also
	#do_accounting("db","missed");
	
	route(relay);
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		xlog("=============route invite==========");
		if ($proto == "wss" || $proto == "ws") {
			fix_nated_sdp("10");
		}
		t_on_branch("handle_nat");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	} else if (is_method("BYE|CANCEL")) {
		rtpengine_delete();	
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	}
	exit;
}


branch_route[handle_nat] {
	if (!is_method("INVITE") || !has_body("application/sdp"))
		return;

	if(nat_uac_test("8")) {
		xlog("sdp is beheind NAT========***********");
	}
	xlog("=========handle_nat======= $ru========$rU=======$si=====$Ri========$rt======");
	if ($si != "172.19.0.251") { 
		$ru = "sip:" + $rU + "@172.19.0.251:5060";
	} 
	xlog("========real ru:$ru==========");
	if (isflagset(SRC_WS) && isbflagset(DST_WS)) {
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive codec-mask-PCMA codec-trip-opus transcode-opus rtcp-mux-require in-iface=priv out-iface=pub";

	}	
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS)){
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove in-iface=priv out-iface=priv";
		xlog("==========SRC_WS ========!DST_WS");
	}
	 else if (!isflagset(SRC_WS) && isbflagset(DST_WS)) {
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force  transcode-opus rtcp-mux-offer rtcp-mux-require SDES-off in-iface=priv out-iface=priv";
	}
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS)) {
	    	$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove in-iface=priv out-iface=priv";
		xlog("=======!!");
	}
	
	xlog("================rtpengine_offer============");
	xlog("$var(rtpengine_flags)");
	if(rtpengine_offer("$var(rtpengine_flags)", "$var(socket)", "$var(body)")) {
		remove_body_part();
		add_body_part("$var(body)", "application/sdp");
	}
}

# proxy registrar -REGISTER handling
#route[handle_reg] {
#	if(is_method("REGISTER")) {
#		t_on_reply("handle_reply_reg");
#		t_relay();
#	}
#}

# proxy registrar - REGISTER reply handling
#onreply_route[handle_reply_reg] {
#	if(t_check_status("2[0-9][0-9]")){
#		save("location");
#	}
#}

onreply_route[handle_nat] {
	
	xlog("incoming reply============================\n");
	fix_nated_contact();
	#xlog("incoming 1=========");
	if (!has_body("application/sdp"))
		return;
	#ws
	if (isflagset(SRC_WS) && $rs == "200") {
		fix_nated_sdp("10");
	}
	
	xlog("incoming 2=======");
	#sdp_mangle_ip("172.31.13.78", "172.31.13.73");

	xlog("change sdp tile==============");
	if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive in-iface=pub out-iface=pub";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force transcode-opus rtcp-mux-offer rtcp-mux-require SDES-off in-iface=priv out-iface=priv";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS)) {
		xlog("=====!SRC_WS===========isDST_WS");
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove in-iface=priv out-iface=priv";
	} else if (!isflagset(SRC_WS) && !isbflagset(DST_WS)){
		xlog("=======!SRC_WS======!DST_WS========");
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove in-iface=priv out-iface=priv";
	}
	xlog("=======rtpengine_answer======");
	xlog("==========$var(rtpengine_flags)");
	if(rtpengine_answer("$var(rtpengine_flags)", "$var(socket)", "$var(body)")) {
		remove_body_part();
		add_body_part("$var(body)", "application/sdp");
	}
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	
}



local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}
